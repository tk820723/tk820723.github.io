{"meta":{"title":"一半游云 一半凌霄","subtitle":null,"description":null,"author":"Weibai Lu","url":"http://tk820723.github.io"},"pages":[],"posts":[{"title":"Hexo插入音乐播放器","slug":"音乐播放器","date":"2016-04-29T02:17:19.000Z","updated":"2016-04-29T03:42:44.000Z","comments":true,"path":"2016/04/29/音乐播放器/","link":"","permalink":"http://tk820723.github.io/2016/04/29/音乐播放器/","excerpt":"","keywords":null,"text":"这个网站也弄了一阵子，感觉图片什么都可以顺利加载了，顺便研究了一下如何插入网易音乐的模块。 下面转载一个iframe版本的外链播放器代码 音乐iframe代码123456&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=device-width height=450 src=\"http://music.163.com/outchain/player?type=0&amp;id=66176787&amp;auto=0&amp;height=430\"&gt;&lt;/iframe&gt;参数： width height 为显示的宽高 链接中的id为歌单id，可以上网页版网易音乐云获取。 auto参数为1则自动播放，0默认不自动播放 下面是示例：","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://tk820723.github.io/categories/Hexo/"}],"tags":[]},{"title":"个人写的一个弹窗控件","slug":"个人写的一个弹窗控件","date":"2016-04-27T03:09:06.000Z","updated":"2016-04-27T04:12:08.000Z","comments":true,"path":"2016/04/27/个人写的一个弹窗控件/","link":"","permalink":"http://tk820723.github.io/2016/04/27/个人写的一个弹窗控件/","excerpt":"","keywords":null,"text":"最近公司工作需要做一个从下往上的弹窗，但是我发现原生Actionsheet不是很好用，所以就自己写了一个弹窗控件。 github地址：https://github.com/tk820723/WBCustomActionSheet 使用起来非常简单。类方法传入弹框标题文字，然后使用类似tableview的datasource使用方法，每一个按钮样式都可以传进去，可以不为每个按钮绑定方法，使用delegate的didSelectIndex来判断也可以。显示出来调用showAnimated即可。","raw":null,"content":null,"categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://tk820723.github.io/categories/iOS开发/"}],"tags":[]},{"title":"mac下还原pvr与plist为多个png","slug":"mac下还原pvr与plist为多个png","date":"2016-04-20T09:06:34.000Z","updated":"2016-04-26T08:27:36.000Z","comments":true,"path":"2016/04/20/mac下还原pvr与plist为多个png/","link":"","permalink":"http://tk820723.github.io/2016/04/20/mac下还原pvr与plist为多个png/","excerpt":"","keywords":null,"text":"在网上找了很久，如何把很多网上下载的ipa包中扣出的图片资源（通常为pvr与plist结合格式）还原为png，只找到了一些python写的代码，但是mac下跑不起来，一直没有找到很好的自动化方法，就自己写了一个mac软件，帮助处理自动化切图。需要自己传入相应的png大图路径，plist文件路径，以及输出目录路径 控制器代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586@interface ViewController ()@property (weak) IBOutlet NSTextField *pngPathField;@property (weak) IBOutlet NSTextField *plistPathField;@property (weak) IBOutlet NSTextField *targetPathField;@end@implementation ViewController- (void)viewDidLoad &#123;[super viewDidLoad];&#125;- (IBAction)BtnClicked:(NSButton *)sender &#123;if (_pngPathField.stringValue.length == 0 || _plistPathField.stringValue.length == 0 || _targetPathField.stringValue.length == 0) &#123;NSLog(@\"输入路径不能为空\");return;&#125;//读取所有的文件，转换为数据数组NSString *pngPath = _pngPathField.stringValue;NSString *plistPath = _plistPathField.stringValue;NSString *targetPath = _targetPathField.stringValue;NSDictionary *plistDic = [NSDictionary dictionaryWithContentsOfFile:plistPath];NSDictionary *framesDic = [plistDic valueForKey:@\"frames\"];NSArray *framesArray = framesDic.allValues;NSArray *namesArray = framesDic.allKeys;if (framesArray.count==0||namesArray.count==0) &#123;NSLog(@\"字典文件没有对象\");return;&#125;//遍历数组转换plist数据for (int i = 0; i&lt; namesArray.count; i++) &#123;NSString *picName = namesArray[i];NSDictionary *singleImageFrameDic = framesArray[i];BOOL rotated = [[singleImageFrameDic objectForKey:@\"rotated\"] boolValue];NSRect frame = NSRectFromString([singleImageFrameDic valueForKey:@\"frame\"]);if (rotated) &#123;frame = NSMakeRect(frame.origin.x, frame.origin.y, frame.size.height, frame.size.width);&#125;else&#123;frame = NSMakeRect(frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);&#125;NSImage *image = [[NSImage alloc] initWithContentsOfFile:pngPath];CGImageRef cutImageRef = [self cutImage:image frame:frame];[self WriteImageRefToFile:cutImageRef path:targetPath withImageName:picName];&#125;NSLog(@\"输入图片成功\");&#125;//根据数据切割图片，返回切割完的图片ref- (CGImageRef)cutImage: (NSImage *)image frame: (NSRect)frame&#123;CGImageSourceRef source = CGImageSourceCreateWithData((CFDataRef)[image TIFFRepresentation], NULL);CGImageRef maskRef = CGImageSourceCreateImageAtIndex(source, 0, NULL);CGImageRef finalImgRef = CGImageCreateWithImageInRect(maskRef, frame);return finalImgRef;&#125;//把图片输出到选择的目录- (void)WriteImageRefToFile: (CGImageRef) image path: (NSString *)path withImageName: (NSString *)imageName&#123;NSString *desPath = [NSString stringWithFormat:@\"%@/%@\",path,imageName];CFURLRef url = (__bridge CFURLRef)[NSURL fileURLWithPath:desPath];CGImageDestinationRef destination = CGImageDestinationCreateWithURL(url, kUTTypePNG, 1, NULL);CGImageDestinationAddImage(destination, image, nil);if (!CGImageDestinationFinalize(destination)) &#123;NSLog(@\"Failed to write image to %@\", path);&#125;CFRelease(destination);&#125;- (void)setRepresentedObject:(id)representedObject &#123;[super setRepresentedObject:representedObject];// Update the view, if already loaded.&#125;@end","raw":null,"content":null,"categories":[{"name":"cocos2dx","slug":"cocos2dx","permalink":"http://tk820723.github.io/categories/cocos2dx/"}],"tags":[]},{"title":"hexo deploy 部署github缓慢解决方法","slug":"hexo-deploy-缓慢解决方法","date":"2016-04-20T08:46:16.000Z","updated":"2016-04-20T09:04:07.000Z","comments":true,"path":"2016/04/20/hexo-deploy-缓慢解决方法/","link":"","permalink":"http://tk820723.github.io/2016/04/20/hexo-deploy-缓慢解决方法/","excerpt":"","keywords":null,"text":"不知道出于什么原因，使用hexo deploy部署到github会非常缓慢，有时候一个小时都没反应。查询了一大堆资源都没有找到解决方法，后来结合github部署个人网站原理，其实更改的最主要就是index.html这个静态网页。所以尝试手动push到github，这样部署过程就快很多了。步骤如下： ＊ 新建一个文件夹，cd到这个目录，使用git init初始化git然后git remote add origin https://github.com/你的用户名/你的用户名.github.io 给这个目录连接到你的网页 ＊ git pull origin master 拉下当前目录 ＊ 然后把hexo在你本地网页目录下生成的public所有东西替换进新建的这个文件夹 ＊ 然后push一下这个文件夹，整个部署就完成了","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://tk820723.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo deploy","slug":"Hexo-deploy","permalink":"http://tk820723.github.io/tags/Hexo-deploy/"}]},{"title":"这是第一篇主页文章，我决定把他拿来测试","slug":"终于把Hexo服务器弄好了","date":"2016-04-20T05:30:49.000Z","updated":"2016-04-20T07:00:01.000Z","comments":true,"path":"2016/04/20/终于把Hexo服务器弄好了/","link":"","permalink":"http://tk820723.github.io/2016/04/20/终于把Hexo服务器弄好了/","excerpt":"","keywords":null,"text":"折腾半天终于把Hexo服务器弄好了，主要是各种装了一半失败，然后查阅资料，原来是翻墙的原因。翻了墙之后又遇到国内hexo2.0和3.0教程不兼容问题，公司网络连接github也是时好时坏，磕磕碰碰终于搞好了一个网站。可以用来装逼了哈哈。下面👇全是学习hexo的测试。 这是一段blockquote Weibai LuQueteMe.com Code Block1NSLog(@\"Hello codeblock!\");","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://tk820723.github.io/categories/Hexo/"}],"tags":[]}]}